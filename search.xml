<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>為什麼你需要custom hooks（React）？</title>
      <link href="/post/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E9%9C%80%E8%A6%81custom-hooks/"/>
      <url>/post/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E9%9C%80%E8%A6%81custom-hooks/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇所要提及的內容，是很菜很菜的時候認識到的，</p><p>深入學習了之後彷彿世界明亮了起來～</p><p>導入到了老舊的專案上面，很大程度減低了 React 組件檔案的複雜度</p><p>也讓我從一天一顆葉黃素變到了兩天一顆 🥲</p><h2 id="事前須知"><a href="#事前須知" class="headerlink" title="事前須知"></a>事前須知</h2><ul><li>ES6 destructuring assignment&#x2F; async + await</li><li>axios&#x2F; request</li><li>Basic React hooks and how they work<ul><li>useState</li><li>useEffect</li></ul></li></ul><h2 id="模擬場景"><a href="#模擬場景" class="headerlink" title="模擬場景"></a>模擬場景</h2><p>假設今天要來做一個 Todo-list <del>aka 前端框架的 Hello word</del></p><p>大致上結構上會長這個樣子:</p><p>一個頁面，一個 List，然後渲染出對應數量個 Item</p><p><img src="/img/posts/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E9%9C%80%E8%A6%81custom-hooks/todo-page.png" alt="todo-page"></p><p>於是照著這個思路</p><p>我們把<code>TodoPage</code>完成了 🥳</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TodoPage.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SomeLoader</span>, <span class="title class_">TodoList</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoPage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: [],</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchTodos</span>()</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchTodos</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...prev,</span><br><span class="line">      <span class="attr">isLoading</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.fake.com/todos&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> formattedData = <span class="title function_">formatData</span>(data)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">setTodos</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...prev,</span><br><span class="line">        <span class="attr">data</span>: formattedData,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">//error handling</span></span><br><span class="line">      <span class="title function_">setTodos</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...prev,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">formatData</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//data formatting</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todolist&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todos.isLoading ? <span class="tag">&lt;<span class="name">SomeLoader</span> /&gt;</span> : <span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;todos.data&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok 那這時候寫完了，會發現我們在<strong>第 45 行</strong>之後才終於碰到了 UI 的部分</p><p>而<strong>8~46 行</strong>都在做資料方面的事情</p><p>那那那…如果今天還要加上刪除、新增、修改</p><p>總共會有幾行呢？😨 如果還要加上篩選器呢 😨</p><p>…</p><p>於是</p><p>…</p><p>…</p><p>最後你會發現它變成了___</p><p>在維護的時候不停上下跳動 💩</p><p><img src="/img/posts/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E9%9C%80%E8%A6%81custom-hooks/jumping.png" alt="jumping"></p><h2 id="Custom-hooooook"><a href="#Custom-hooooook" class="headerlink" title="Custom hooooook"></a>Custom hooooook</h2><p><del>為了鍵盤的安全著想</del>，趕緊來認識一下 React custom hook</p><ul><li>命名規則: useXXX.js</li><li>可複用，hook 之間可互相結合</li><li>不同組件&#x2F;hook 會擁有獨立的 state</li></ul><p>篇幅關係，有機會再跟大家介紹 hooks 的限制及規則</p><p>所以我們可以創建一個<code>useTodos</code></p><p>並把相關的東西全丟進去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useTodos.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useTodos</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: [],</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchTodos</span>()</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchTodos</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...prev,</span><br><span class="line">      <span class="attr">isLoading</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>)</span><br><span class="line">      <span class="title function_">setTodos</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...prev,</span><br><span class="line">        <span class="attr">data</span>: data,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">//error handling</span></span><br><span class="line">      <span class="title function_">setTodos</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...prev,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: todos.<span class="property">data</span>,</span><br><span class="line">    <span class="attr">isLoading</span>: todos.<span class="property">isLoading</span>,</span><br><span class="line">    <span class="attr">isError</span>: todos.<span class="property">isError</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後回到我們一開始的<code>TodoPage</code></p><p>優雅的引入並使用剛剛寫好的<code>useTodos</code></p><p>於是乎世界又恢復了和平 😁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TodoPage.js (after)</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SomeLoader</span>, <span class="title class_">TodoList</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTodos &#125; <span class="keyword">from</span> <span class="string">&#x27;./useTodos&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoPage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> todos = <span class="title function_">useTodos</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todolist&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todos.isLoading ? <span class="tag">&lt;<span class="name">SomeLoader</span> /&gt;</span> : <span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;todos.data&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="後話"><a href="#後話" class="headerlink" title="後話"></a>後話</h3><p>雖然使用 custom hooks 很方便</p><p>但也由於它的便利性，也可能會造成災難</p><p>因此不論是新舊專案，事先做點規劃還是很重要的</p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
            <tag> Custom hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github Actions，自動部署Markdown文章</title>
      <link href="/post/Hexo-Github-Actions%EF%BC%8C%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2Markdown%E6%96%87%E7%AB%A0/"/>
      <url>/post/Hexo-Github-Actions%EF%BC%8C%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2Markdown%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章<a href="https://ahe99.github.io/2022/08/28/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/">你好世界</a>中有提到，</p><p>為了好好專心寫文章，於是使用了 <a href="https://hexo.io/zh-tw/">Hexo</a> + <a href="https://github.com/features/actions">Github Actions</a></p><p>這樣一個組合來快速搭建一個自動化部署的 Blog</p><p><img src="/img/posts/Hexo-Github-Actions%EF%BC%8C%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2Markdown%E6%96%87%E7%AB%A0/flow.png" alt="flow"></p><p>今天就來說要怎麼做吧～</p><hr><!-- ## 目錄- [事前準備](#事前準備)- [Hexo 介紹](#hexo-介紹)- [Github Actions 介紹](#github-actions-介紹)--- --><h2 id="事前須知"><a href="#事前須知" class="headerlink" title="事前須知"></a>事前須知</h2><ul><li>安裝 <a href="https://nodejs.org/zh-tw/">Node.js、npm</a></li><li>安裝 <a href="https://git-scm.com/">Git</a></li><li>基礎 Git、Github (pages) 概念</li><li>基礎 Markdown 概念</li></ul><hr><h2 id="Hexo-int"><a href="#Hexo-int" class="headerlink" title="Hexo int"></a>Hexo int</h2><p><code>Hexo</code>，簡單來說，就是讓使用者能夠省略許多建置過程、寫<code>Markdown</code>當作文章的框架</p><p>且有許多強大的<code>Plugins</code>和<code>Themes</code>可以做選擇</p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>我們可以透過<code>npm</code>去安裝<code>Hexo-cli</code></p><p>這個工具可以幫我們創建 <code>Hexo</code>專案、編譯…等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init (blog名稱)</span><br><span class="line"><span class="built_in">cd</span> (blog名稱)</span><br></pre></td></tr></table></figure><h3 id="專案架構"><a href="#專案架構" class="headerlink" title="專案架構"></a>專案架構</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── _config.landscape.yml：Hexo主題的設定檔</span><br><span class="line">├── _config.yml：Hexo的設定檔</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds：Markdown模板</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source：專案主要內容（文章、頁面）</span><br><span class="line">│   └── _posts：文章目錄</span><br><span class="line">│       └── hello-world.md Hexo送你的教學文章（？</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>這邊可以特別說明一下，這裡有兩個<code>config</code></p><ul><li>_config.landscape.yml</li><li>_config.yml</li></ul><p>因為<strong>Hexo 預設的 Theme</strong>是<code>landscape</code></p><p>像本站用的<code>butterly</code>，就會是：</p><ul><li>_config.butterly.yml</li><li>_config.yml</li></ul><p>以此類推，</p><p>設定的詳細內容，因為篇幅問題</p><p>所以應該之後會再拿來水文章 XD</p><h3 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h3><p>新增文章除了可以直接在<code>_posts</code>底下新增 Markdown 檔案，</p><p>也可以透過指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post (文章名稱)</span><br></pre></td></tr></table></figure><p>這個指令會從<code>scaffold</code>底下，找到你指定的模板</p><p>去創一個新的<code>Markdown</code>在<code>source</code>底下，</p><p>以這裡來說就是<code>post</code>，也就是你的文章</p><p><img src="/img/posts/Hexo-Github-Actions%EF%BC%8C%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2Markdown%E6%96%87%E7%AB%A0/new-post.png" alt="new-post"></p><p>這邊我們就可以使用<code>Markdown</code>撰寫文章在<code>test.md</code>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">date: 2022-09-04 21:15:21</span><br><span class="line"><span class="section">tags:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 測試</span></span><br><span class="line"></span><br><span class="line">大家好，這裡是<span class="strong">**測試**</span>的文章。</span><br></pre></td></tr></table></figure><h3 id="本地預覽"><a href="#本地預覽" class="headerlink" title="本地預覽"></a>本地預覽</h3><p>文章也寫好了，那當然在正式上去之前</p><p>還是會希望能夠看到文章在網站上呈現的樣子</p><p>這時候就可以使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>來在本機架起網站環境</p><p>(預設會是<code>http://localhost:4000</code>)</p><p><img src="/img/posts/Hexo-Github-Actions%EF%BC%8C%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2Markdown%E6%96%87%E7%AB%A0/preview.png" alt="preview"></p><hr><h2 id="Github-Actions-介紹"><a href="#Github-Actions-介紹" class="headerlink" title="Github Actions 介紹"></a>Github Actions 介紹</h2><p>在新增完文章過後，準備 <strong>Push 到 Github</strong> 之前，</p><p>需要注意的是，<strong>沒有編譯過的程式碼，沒辦法直接變成網站</strong></p><p>所以我們需要對現在的 code 進行一些額外處理</p><p>有兩種方式：</p><p><img src="/img/posts/Hexo-Github-Actions%EF%BC%8C%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2Markdown%E6%96%87%E7%AB%A0/two-way-deploy.png" alt="two-way-deploy"></p><p>前者的流程代表本地編譯之後上傳 Github</p><p>而後者會直接上傳 Github，<strong>由 Github 幫我們編譯</strong></p><p>兩種方式都可以，今天要介紹的是後者的方式</p><p>會使用到 <code>Github Actions</code>，也就是 <code>Github CI</code></p><p>這檔事情，簡單來說就是叫 Github 的 server 去做一些指令操作</p><p>像這邊我們希望將<code>編譯(build)</code>的這個動作交給 Github 去做</p><p>就可以依照 <a href="https://hexo.io/zh-tw/docs/github-pages.html">Hexo 官方建議的方式</a></p><p>在專案目錄底下創建 <code>.github/workflows/pages.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/pages.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 你會推上的Github分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>可以注意的是這一段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>這邊的作用就是會將 build 好的 code</p><p>推到你 Github repo 的另外一個 branch <code>gh-pages</code></p><p>於是最後在我們 Giuhub pages repository 設定上</p><p><img src="/img/posts/Hexo-Github-Actions%EF%BC%8C%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2Markdown%E6%96%87%E7%AB%A0/github-pages.png" alt="github-pages"></p><p>這裡有有畫綠底線代表說大多數Github pages</p><p>repo跟網址的關係</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo: 你的帳號/你的帳號.github.io</span><br><span class="line"></span><br><span class="line">url: https://你的帳號.github.io/</span><br></pre></td></tr></table></figure><p>這裡就不多贅述</p><p>而在右下角綠框設定</p><ul><li>Deploy from a branch</li><li>gh-pages</li></ul><p>這樣就大功告成了！</p><p>每次文章寫好後，Git push上到Github時</p><p>都會跑Github actions將網站更新</p><hr>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github Actions </tag>
            
            <tag> Github Pages </tag>
            
            <tag> Markdown </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好世界</title>
      <link href="/post/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/"/>
      <url>/post/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<hr><p>做為第一篇文，其實心情還是蠻複雜和激動的。</p><p>畢竟從很久之前就有寫 Blog 的打算，</p><p>但作為一個 WEB 的萌新，總會想著要透過 Side project 去挑戰自己，</p><p>每次在腦中建構 Blog 專案：光是前端就有…</p><ul><li>前台展示文章</li><li>後台管理&#x2F;統計</li></ul><p>用想的就感到疲憊不堪 🙀</p><p>確實，這種本末倒置的事情也不是沒有發生過……</p><p>前陣子就有在做一個類似記憶卡的 App，為了幫助自己通過學校的英文畢業門檻<a href="https://github.com/ahe99/flashcard">「Flashcard」</a></p><img src="https://github.com/ahe99/flashcard/raw/develop/assets/icon.png" alt="Flashcard" width="250"/><p>如今早已畢業三個月，專案進度卻仍然停滯中 🥲</p><p>話說回來，在實習轉正、工作等當兵的這段時間之中，</p><p>逐漸覺得我應該把實作上的心得 <del>（aka 踩過的坑）</del> 記錄下來，讓自己印象能更深刻點。</p><p>於是最後選擇了：</p><ul><li><a href="https://hexo.io/zh-tw/">Hexo</a> with theme <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></li><li><a href="https://github.com/features/actions">Github Actions</a></li><li><a href="https://analytics.google.com/">Google Analytics</a></li></ul><p>這樣的一個專案配置，跟最初的構想比起來真的是輕鬆多了 🤣</p><p>才終於有專心寫著第一篇文的今天，</p><p>也希望後續的文章能夠幫助到有需要的人。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 閒聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 閒聊 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
